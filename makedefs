#==============================================================================
#     Stuff to compile
#==============================================================================

# Collect source files
AS_SRC := $(shell find . -type f -name '*.s')
C_SRC := $(shell find . -type f -name '*.c')
CXX_SRC := $(shell find . -type f -name '*.cpp')

# Get location of compiled objects
AS_OBJ := $(AS_SRC:./%.s=%.o)
C_OBJ := $(C_SRC:./%.c=%.o)
CXX_OBJ := $(CXX_SRC:./%.cpp=%.o)

# Combine object file lists
OBJS=$(C_OBJ) $(AS_OBJ) $(CXX_OBJ)

#==============================================================================
#     Target properties
#==============================================================================

# Microcontroller properties.
# Set these based on $(PART) variable:

CPU=-mcpu=cortex-m4
FPU=-mfpu=fpv4-sp-d16 -mfloat-abi=softfp

# Linker file name
LINKER_FILE = $(PART).ld

#==============================================================================
#     Toolchain settings
#==============================================================================

os:=${shell uname -s}

# Toolchain executables
PREFIX_ARM = arm-none-eabi
AR   = ${PREFIX_ARM}-ar
AS   = ${PREFIX_ARM}-as
CC   = ${PREFIX_ARM}-gcc
CP   = ${PREFIX_ARM}-objcopy
CPP  = ${PREFIX_ARM}-cpp
CXX  = ${PREFIX_ARM}-g++
GDB  = ${PREFIX_ARM}-gdb
LD   = ${PREFIX_ARM}-ld
NM   = ${PREFIX_ARM}-nm
OD   = ${PREFIX_ARM}-objdump
SIZE = ${PREFIX_ARM}-size

# Paths to TI libraries
# STELLARISWARE = /Developer/stellarisware
TIVIAWARE     = /Developer/tiviaware

STELLARISWARE = C\:/ti/stellarisware

# Choose which library path to use (Tivia/Stellaris)
TI_INCLUDE_PATH = $(STELLARISWARE)

# libdriver file for Stellarisware on Cortex M3
LIBDRIVER_FILE=driverlib/gcc-cm4f/libdriver-cm4f.a

# libdriver file for Stellarisware on Cortex M4F
# LIBDRIVER_FILE=driverlib/gcc-cm3/libdriver-cm3.a

# libdriver file for Tiviaware on Cortex M4
# LIBDRIVER_FILE=driverlib/gcc/libdriver.a

# Define symbols
DEFS = -DPART_$(PART) \
	   -DTARGET_IS_BLIZZARD_RA1

# Include paths
INCS = -I$(TI_INCLUDE_PATH)

# Options for assembler.
ASFLAGS=-mthumb \
        ${CPU}  \
        ${FPU}  \
        -MD

# Arguments for C compiler.
CFLAGS=-mthumb             \
       ${CPU}              \
       ${FPU}              \
       -O3                 \
       -ffunction-sections \
       -fdata-sections     \
       -std=c99            \
       -Wall               \
       -c                  \
       -g                  \
       -MD                 \
       ${INCS}             \
       $(DEFS)

# Arguments for C++ compiler
CXXFLAGS=-mthumb             \
         ${CPU}              \
         ${FPU}              \
         -O3                 \
         -ffunction-sections \
         -fdata-sections     \
         -Wall               \
         -c                  \
         -g                  \
         -MD                 \
         ${INCS}             \
         $(DEFS)

# Flags for linker
LFLAGS = --gc-sections --entry reset_handler -Map build/$(PROJECT_NAME).map

# Get the path to libgcc, libc.a and libm.a for linking
LIB_GCC_PATH=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}
LIBC_PATH=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}
LIBM_PATH=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}

# Get path to Stellaris/Tivia library
LIBDRIVER_PATH=${TI_INCLUDE_PATH}/$(LIBDRIVER_FILE)

# List of all libraries to link
LIBS = $(LIBM_PATH) $(LIBC_PATH) $(LIB_GCC_PATH)

# Flags for objcopy
CPFLAGS = -Obinary

# Flags for objdump
ODFLAGS = -S

# Programmer tool path
FLASHER=lm4flash
# Flags for the programmer tool.
FLASHER_FLAGS=

#==============================================================================
#    Make rules
#==============================================================================


# Include autogenerated depend files
# -include $(AS_SRC:.s=.d)
# -include $(C_SRC:.c=.d)
# -include $(CXX_SRC:.cpp=.d)

# Compile assembly files
%.o: %.s
	@echo "AS " $<
	@$(AS) -c $(ASFLAGS) $< -o $@

# Compile C files
%.o: %.c
	@echo "CC " $@
	@$(CC) -c $(CFLAGS) $< -o $@

# Compile C++ files
%.o: %.cpp
	@echo CXX $<
	@$(CXX) -c $(CXXFLAGS) $< -o $@

# Transform .axf to .bin for flasher util
%.bin: %.axf
	@mkdir -p $(dir $@)
	@echo "CP " $< "->" $@
	@$(CP) $(CPFLAGS) $< $@

# Make assembly listing from executable
%.lst: %.axf
	@mkdir -p $(dir $@)
	@echo "OD " $@
	@$(OD) $(ODFLAGS) $< > $@

# Calculate code size
%.size: %.axf
	@mkdir -p $(dir $@)
	@echo
	@echo Code size:
	@$(SIZE) $< | tee $@
